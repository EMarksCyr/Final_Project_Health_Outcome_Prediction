from dataclasses import dataclass
from typing import NamedTuple

_RAW_ENCODING_TABLE = """
1 	_STATE 	2
17 	FMONTH 	2
19 	IDATE 	8
19 	IMONTH 	2
21 	IDAY 	2
23 	IYEAR 	4
32 	DISPCODE 	4
36 	SEQNO 	10
36 	_PSU 	10
63 	CTELENM1 	1
64 	PVTRESD1 	1
65 	COLGHOUS 	1
66 	STATERE1 	1
67 	CELPHONE 	1
68 	LADULT1 	1
69 	COLGSEX 	1
70 	NUMADULT 	2
72 	LANDSEX 	1
73 	NUMMEN 	2
75 	NUMWOMEN 	2
77 	RESPSLCT 	1
78 	SAFETIME 	1
79 	CTELNUM1 	1
80 	CELLFON5 	1
81 	CADULT1 	1
82 	CELLSEX 	1
83 	PVTRESD3 	1
84 	CCLGHOUS 	1
85 	CSTATE1 	1
88 	LANDLINE 	1
89 	HHADULT 	2
91 	SEXVAR 	1
101 	GENHLTH 	1
102 	PHYSHLTH 	2
104 	MENTHLTH 	2
106 	POORHLTH 	2
108 	HLTHPLN1 	1
109 	PERSDOC2 	1
110 	MEDCOST 	1
111 	CHECKUP1 	1
112 	BPHIGH4 	1
113 	BPMEDS 	1
114 	CHOLCHK2 	1
115 	TOLDHI2 	1
116 	CHOLMED2 	1
117 	CVDINFR4 	1
118 	CVDCRHD4 	1
119 	CVDSTRK3 	1
120 	ASTHMA3 	1
121 	ASTHNOW 	1
122 	CHCSCNCR 	1
123 	CHCOCNCR 	1
124 	CHCCOPD2 	1
125 	ADDEPEV3 	1
126 	CHCKDNY2 	1
127 	DIABETE4 	1
128 	DIABAGE3 	2
130 	HAVARTH4 	1
131 	ARTHEXER 	1
132 	ARTHEDU 	1
133 	LMTJOIN3 	1
134 	ARTHDIS2 	1
135 	JOINPAI2 	2
173 	MARITAL 	1
174 	EDUCA 	1
175 	RENTHOM1 	1
184 	NUMHHOL3 	1
185 	NUMPHON3 	1
186 	CPDEMO1B 	1
187 	VETERAN3 	1
188 	EMPLOY1 	1
189 	CHILDREN 	2
191 	INCOME2 	2
193 	WEIGHT2 	4
197 	HEIGHT3 	4
201 	PREGNANT 	1
202 	DEAF 	1
203 	BLIND 	1
204 	DECIDE 	1
205 	DIFFWALK 	1
206 	DIFFDRES 	1
207 	DIFFALON 	1
208 	SMOKE100 	1
209 	SMOKDAY2 	1
210 	STOPSMK2 	1
211 	LASTSMK2 	2
213 	USENOW3 	1
214 	ALCDAY5 	3
217 	AVEDRNK3 	2
219 	DRNK3GE5 	2
221 	MAXDRNKS 	2
223 	EXERANY2 	1
224 	EXRACT11 	2
226 	EXEROFT1 	3
229 	EXERHMM1 	3
232 	EXRACT21 	2
234 	EXEROFT2 	3
237 	EXERHMM2 	3
240 	STRENGTH 	3
243 	FRUIT2 	3
246 	FRUITJU2 	3
249 	FVGREEN1 	3
252 	FRENCHF1 	3
255 	POTATOE1 	3
258 	VEGETAB2 	3
261 	FLUSHOT7 	1
262 	FLSHTMY3 	6
268 	TETANUS1 	1
269 	PNEUVAC4 	1
270 	HIVTST7 	1
271 	HIVTSTD3 	6
277 	HIVRISK5 	1
278 	PDIABTST 	1
279 	PREDIAB1 	1
280 	INSULIN1 	1
281 	BLDSUGAR 	3
284 	FEETCHK3 	3
287 	DOCTDIAB 	2
289 	CHKHEMO3 	2
291 	FEETCHK 	2
293 	EYEEXAM1 	1
294 	DIABEYE 	1
295 	DIABEDU 	1
296 	TOLDCFS 	1
297 	HAVECFS 	1
298 	WORKCFS 	1
299 	TOLDHEPC 	1
300 	TRETHEPC 	1
301 	PRIRHEPC 	1
302 	HAVEHEPC 	1
303 	HAVEHEPB 	1
304 	MEDSHEPB 	1
305 	HPVADVC3 	1
306 	HPVADSHT 	2
308 	IMFVPLA1 	2
310 	SHINGLE2 	1
311 	LCSFIRST 	3
314 	LCSLAST 	3
317 	LCSNUMCG 	3
320 	LCSCTSCN 	1
321 	HADMAM 	1
322 	HOWLONG 	1
323 	HADPAP2 	1
324 	LASTPAP2 	1
325 	HPVTEST 	1
326 	HPLSTTST 	1
327 	HADHYST2 	1
328 	PCPSAAD3 	1
329 	PCPSADI1 	1
330 	PCPSARE1 	1
331 	PSATEST1 	1
332 	PSATIME 	1
333 	PCPSARS1 	1
334 	PCPSADE1 	1
335 	PCDMDEC1 	1
336 	BLDSTOOL 	1
337 	LSTBLDS3 	1
338 	HADSIGM3 	1
339 	HADSGCO1 	1
340 	LASTSIG3 	1
341 	CNCRDIFF 	1
342 	CNCRAGE 	2
344 	CNCRTYP1 	2
346 	CSRVTRT3 	1
347 	CSRVDOC1 	2
349 	CSRVSUM 	1
350 	CSRVRTRN 	1
351 	CSRVINST 	1
352 	CSRVINSR 	1
353 	CSRVDEIN 	1
354 	CSRVCLIN 	1
355 	CSRVPAIN 	1
356 	CSRVCTL2 	1
357 	HLTHCVR1 	2
359 	ASPIRIN 	1
360 	HOMBPCHK 	1
361 	HOMRGCHK 	1
362 	WHEREBP 	1
363 	SHAREBP 	1
364 	WTCHSALT 	1
365 	DRADVISE 	1
366 	INDORTAN 	3
369 	NUMBURN3 	3
372 	SUNPRTCT 	1
373 	WKDAYOUT 	2
375 	WKENDOUT 	2
377 	CIMEMLOS 	1
378 	CDHOUSE 	1
379 	CDASSIST 	1
380 	CDHELP 	1
381 	CDSOCIAL 	1
382 	CDDISCUS 	1
383 	CAREGIV1 	1
384 	CRGVREL3 	2
386 	CRGVLNG1 	1
387 	CRGVHRS1 	1
388 	CRGVPRB3 	2
390 	CRGVALZD 	1
391 	CRGVPER1 	1
392 	CRGVHOU1 	1
393 	CRGVEXPT 	1
394 	ACEDEPRS 	1
395 	ACEDRINK 	1
396 	ACEDRUGS 	1
397 	ACEPRISN 	1
398 	ACEDIVRC 	1
399 	ACEPUNCH 	1
400 	ACEHURT1 	1
401 	ACESWEAR 	1
402 	ACETOUCH 	1
403 	ACETTHEM 	1
404 	ACEHVSEX 	1
405 	PFPPRVN3 	1
406 	TYPCNTR8 	2
408 	NOBCUSE7 	2
410 	ASBIALCH 	1
411 	ASBIDRNK 	1
412 	ASBIBING 	1
413 	ASBIADVC 	1
414 	ASBIRDUC 	1
415 	MARIJAN1 	2
417 	USEMRJN2 	1
418 	RSNMRJN1 	1
619 	FOODSTMP 	1
620 	BIRTHSEX 	1
621 	SOMALE 	1
622 	SOFEMALE 	1
623 	TRNSGNDR 	1
630 	RCSGENDR 	1
665 	RCSRLTN2 	1
666 	CASTHDX2 	1
667 	CASTHNO2 	1
672 	QSTVER 	2
674 	QSTLANG 	2
1402 	_METSTAT 	1
1403 	_URBSTAT 	1
1409 	MSCODE 	1
1410 	_STSTR 	6
1416 	_STRWT 	10
1446 	_RAWRAKE 	10
1456 	_WT2RAKE 	10
1471 	_IMPRACE 	2
1482 	_CHISPNC 	1
1539 	_CRACE1 	2
1541 	_CPRACE 	2
1585 	_CLLCPWT 	10
1682 	_DUALUSE 	1
1683 	_DUALCOR 	10
1693 	_LLCPWT2 	10
1751 	_LLCPWT 	10
1899 	_RFHLTH 	1
1900 	_PHYS14D 	1
1901 	_MENT14D 	1
1902 	_HCVU651 	1
1903 	_RFHYPE5 	1
1904 	_CHOLCH2 	1
1905 	_RFCHOL2 	1
1906 	_MICHD 	1
1907 	_LTASTH1 	1
1908 	_CASTHM1 	1
1909 	_ASTHMS1 	1
1910 	_DRDXAR2 	1
1911 	_LMTACT2 	1
1912 	_LMTWRK2 	1
1969 	_PRACE1 	2
1971 	_MRACE1 	2
1975 	_HISPANC 	1
1976 	_RACE 	1
1977 	_RACEG21 	1
1978 	_RACEGR3 	1
1979 	_RACE_G1 	1
1980 	_SEX 	1
1981 	_AGEG5YR 	2
1983 	_AGE65YR 	1
1984 	_AGE80 	2
1986 	_AGE_G 	1
1987 	HTIN4 	3
1990 	HTM4 	3
1993 	WTKG3 	5
1998 	_BMI5 	4
2002 	_BMI5CAT 	1
2003 	_RFBMI5 	1
2004 	_CHLDCNT 	1
2005 	_EDUCAG 	1
2006 	_INCOMG 	1
2007 	_SMOKER3 	1
2008 	_RFSMOK3 	1
2009 	DRNKANY5 	1
2010 	DROCDY3_ 	3
2013 	_RFBING5 	1
2014 	_DRNKWK1 	5
2019 	_RFDRHV7 	1
2020 	_TOTINDA 	1
2021 	METVL11_ 	3
2024 	METVL21_ 	3
2027 	MAXVO21_ 	5
2032 	FC601_ 	5
2037 	ACTIN12_ 	1
2038 	ACTIN22_ 	1
2039 	PADUR1_ 	3
2042 	PADUR2_ 	3
2045 	PAFREQ1_ 	5
2050 	PAFREQ2_ 	5
2055 	_MINAC11 	5
2060 	_MINAC21 	5
2065 	STRFREQ_ 	5
2070 	PAMISS2_ 	1
2071 	PAMIN12_ 	5
2076 	PAMIN22_ 	5
2081 	PA2MIN_ 	5
2086 	PAVIG12_ 	5
2091 	PAVIG22_ 	5
2096 	PA2VIGM_ 	5
2101 	_PACAT2 	1
2102 	_PAINDX2 	1
2103 	_PA150R3 	1
2104 	_PA300R3 	1
2105 	_PA30022 	1
2106 	_PASTRNG 	1
2107 	_PAREC2 	1
2108 	_PASTAE2 	1
2109 	FTJUDA2_ 	4
2113 	FRUTDA2_ 	4
2117 	GRENDA1_ 	4
2121 	FRNCHDA_ 	4
2125 	POTADA1_ 	4
2129 	VEGEDA2_ 	4
2133 	_MISFRT1 	1
2134 	_MISVEG1 	1
2135 	_FRTRES1 	1
2136 	_VEGRES1 	1
2137 	_FRUTSU1 	6
2143 	_VEGESU1 	6
2149 	_FRTLT1A 	1
2150 	_VEGLT1A 	1
2151 	_FRT16A 	1
2152 	_VEG23A 	1
2153 	_FRUITE1 	1
2154 	_VEGETE1 	1
2155 	_FLSHOT7 	1
2156 	_PNEUMO3 	1
2157 	_AIDTST4 	1
"""


from collections import namedtuple

Field = namedtuple("Field", ["start_col", "name", "size"])

# create global list to hold fields
_FIELD_ENCODINGS = []

_FIELD_MAXVO21__UNSPECIFIED = "99999"


def _process_encoding_table():
    global _FIELD_ENCODINGS
    # split encoding table by line
    for field in _RAW_ENCODING_TABLE.split("\n"):
        # take line and split into three parts (by white space)
        fields = field.split()
        # ignore any empty lines
        if len(fields) == 0:
            continue
        # make sure all three pieces are there
        assert len(fields) == 3
        # take each three parts and putting them into a field object and appending that to the list
        _FIELD_ENCODINGS.append(Field(int(fields[0]), fields[1], int(fields[2])))


def get_encoding_table():
    if not _FIELD_ENCODINGS:
        _process_encoding_table()
    return _FIELD_ENCODINGS


def get_field(line, field):
    start_i = field.start_col - 1
    end_i = start_i + field.size

    val = line[start_i:end_i].strip()

    if val == "":
        return None

    # NOTE: Assumes that all values are floats

    # NOTE: MAXVO21_ doesn't spcify the unspecified value correctly. Sometimes it only uses 999. This is fine, since it's out of the valid range.
    if field.name == "MAXVO21_" and val[:3] != _FIELD_MAXVO21__UNSPECIFIED[:3]:
        # MAXVO21_ is implied to have two decimal places
        val = float(val[:3]) + (float(val[3:]) / 1000.0)
    else:
        val = float(val)

    return val
